from typing import List, Dict, Any
import base64
import vertexai
from vertexai.preview.vision_models import ImageGenerationModel




def _build_prompt(art_forms: List[str], 
                  region: str, holiday: str, items: List[str], reason: str) -> str:
    art_forms_text = ", ".join(art_forms)
    items_text = ", ".join(items)
    prompt = (
        "Design a product concept image for an Indian artisan. "
        f"Art forms: {art_forms_text}. Target region: {region}. "
        f"Occasion/Festival: {holiday}. "
        f"Recommended items/themes to incorporate: {items_text}. "
        f"Why these make sense: {reason}. "
        "Style: tasteful, authentic, handcrafted aesthetic, high detail, studio lighting, clean background. "
        "Output a single compelling product concept shot that an artisan could realistically create."
    )
    print(prompt)
    return prompt


def generate_design_image(
    art_forms: List[str],
    region: str,
    holiday: str,
    items: List[str],
    reason: str,
    style_hint: str | None = None,
) -> Dict[str, Any]:
    """
    Generates a design concept image using Google's Vertex AI Imagen model.
    Returns a dict: { image_data_url: str, prompt: str }
    """
    prompt = _build_prompt(art_forms, region, holiday, items, reason)
    if style_hint:
        prompt = f"{prompt} Additional style guidance: {style_hint}."

    vertexai.init(project="rich-jigsaw-469313-m2", location="us-central1")
    model_candidates = [
        "imagen-4.0-ultra-generate-001",
        "imagen-4.0-generate-001",
        "imagen-4.0-fast-generate-001",
        "imagen-3.0-generate-002",
        "imagen-3.0-generate-001",
        "imagen-3.0-fast-generate-001",
    ]

    image_data_url = None
    used_model = None
    last_result = None
    last_error: str | None = None

    for model_name in model_candidates:
        try:
            used_model = model_name
            model = ImageGenerationModel.from_pretrained(model_name)
            result_images = model.generate_images(
                prompt=prompt,
                number_of_images=1,
                language="en",
                aspect_ratio="1:1",
                person_generation="allow_adult",
            )
            last_result = result_images
            print(last_result)

            images_list = getattr(result_images, "images", None)
            if images_list is None and isinstance(result_images, (list, tuple)):
                images_list = result_images

            if images_list and len(images_list) > 0:
                img_obj = images_list[0]
                image_bytes = getattr(img_obj, "_image_bytes", None)
                if not image_bytes:
                    pil_img = getattr(img_obj, "_pil_image", None)
                    if pil_img is not None:
                        try:
                            from io import BytesIO
                            buf = BytesIO()
                            pil_img.save(buf, format="PNG")
                            image_bytes = buf.getvalue()
                        except Exception:
                            image_bytes = None
                if isinstance(image_bytes, (bytes, bytearray)):
                    b64 = base64.b64encode(image_bytes).decode("utf-8")
                    image_data_url = f"data:image/png;base64,{b64}"
                    break
        except Exception as gen_err:
            last_error = str(gen_err)
            continue

    resp: Dict[str, Any] = {
        "image_data_url": image_data_url,
        "prompt": prompt,
        "model": used_model,
    }

    if not image_data_url:
        resp["error"] = "No image was generated by the model."
        resp["details"] = {
            "tried_models": model_candidates,
            "used_model": used_model,
            "has_result": bool(last_result),
            "result_type": type(last_result).__name__ if last_result is not None else None,
            "exception": last_error,
        }

    return resp


